'use client';

import { useEffect, useState } from 'react';
import { useSession } from 'next-auth/react';
import { useUser } from '@/lib/UserProvider';
import SellerCard from '@/components/layout/SellerCard';
import { Seller } from '@/types/types';
import Modal from '@/components/system/Modal';
import SellerForm from '@/components/forms/SellerForm';
import Thing from '@/components/layout/Thing';
import Link from 'next/link';
import { useToast } from '@/lib/ToastProvider';

export default function SellersPage() {
	const { data: session } = useSession();
	const { showSuccess, showError } = useToast();
	const { refreshUserData } = useUser();

	const [sellers, setSellers] = useState<Seller[]>([]);
	const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
	const [isEditModalOpen, setIsEditModalOpen] = useState(false);
	const [editingSeller, setEditingSeller] = useState<Seller | null>(null);
	const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
	const [sellerToDelete, setSellerToDelete] = useState<Seller | null>(null);
	const [previousSellers, setPreviousSellers] = useState<Seller[]>([]);
	const [deleteLoading, setDeleteLoading] = useState(false);

	useEffect(() => {
		const fetchUserData = async () => {
			try {
				const response = await fetch('/api/user/data');
				const data = await response.json();
				if (data.user?.sellers) {
					setSellers(data.user.sellers);
				}
			} catch (error) {
				console.error('Error fetching user data:', error);
			}
		};

		if (session) {
			fetchUserData();
		}
	}, [session]);

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
	const handleOpenCreateModal = () => {
		setIsCreateModalOpen(true);
	};

	const handleOpenEditModal = (seller: Seller) => {
		setEditingSeller(seller);
		setIsEditModalOpen(true);
	};

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ–º
	const handleDeleteClick = (seller: Seller) => {
		setSellerToDelete(seller);
		setIsDeleteModalOpen(true);
	};

	const handleConfirmDelete = async () => {
		if (!sellerToDelete) return;
		setDeleteLoading(true);

		try {
			setPreviousSellers(sellers);
			const updatedSellers = sellers.filter(
				(s) => s.seller_id !== sellerToDelete.seller_id
			);
			setSellers(updatedSellers);

			const response = await fetch('/api/user/update', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ sellers: updatedSellers }),
			});

			if (!response.ok) {
				throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞');
			}

			await refreshUserData();
			showSuccess('–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
		} catch (err) {
			setSellers(previousSellers);
			showError(
				err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞'
			);
		} finally {
			setDeleteLoading(false);
		}
	};

	return (
		<>
			<div className='sticker'>
				<h2 className='sticker-header'>–¢–≤–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã</h2>
				<button onClick={handleOpenCreateModal} className='btn btn-g'>
					<span className='btn-label'>–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω</span>
				</button>
			</div>

			<div className='content-container'>
				{sellers.length === 0 ? (
					<>
						<Thing emoji='üëÜ'>
							–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –º–∞–≥–∞–∑–∏–Ω. –í–æ—Ç –∫–Ω–æ–ø–∫–∞ –∑–µ–ª—ë–Ω–∞—è.
						</Thing>
						<Thing emoji='üì¶'>
							–ü–æ—Ç–æ–º —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É
							–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.
						</Thing>
						<Thing emoji='‚ö†Ô∏è'>
							–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –ò–ù–ù –ø—Ä–æ–¥–∞–≤—Ü–∞. –ï—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∂–µ—à—å
							–ò–ù–ù, —Ç–æ —è –Ω–µ —Å–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å.
						</Thing>
						<Thing emoji='üëâ'>
							–ò–ù–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ WB.{' '}
							<a
								href='https://seller.wildberries.ru/supplier-settings/supplier-card'
								target='_blank'
								className='link'>
								–í–æ—Ç —Å—Å—ã–ª–∫–∞, –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞.
							</a>
						</Thing>
					</>
				) : (
					<>
						<Thing emoji='üëå'>
							–û—Ç–ª–∏—á–Ω–æ, –º–∞–≥–∞–∑–∏–Ω —Ç—ã –¥–æ–±–∞–≤–∏–ª. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å
							–ø–æ—Å—Ç–∞–≤–∫–∏,{' '}
							<Link href='/user/supplies' className='link'>
								–ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–π —Å—é–¥–∞.
							</Link>
						</Thing>
					</>
				)}

				<div className='cards'>
					{sellers.map((seller) => (
						<SellerCard
							key={seller.seller_id}
							name={seller.seller_name}
							inn={seller.seller_id}
							onEdit={() => handleOpenEditModal(seller)}
							onDelete={() => handleDeleteClick(seller)}
						/>
					))}
				</div>
			</div>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è */}
			<Modal
				isOpen={isCreateModalOpen}
				onClose={() => setIsCreateModalOpen(false)}
				title='–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω'
				className='card-g'>
				{({ handleClose }) => (
					<SellerForm
						existingSellers={sellers}
						onSuccess={async (newSeller) => {
							setSellers((prev) => [...prev, newSeller]);
							await refreshUserData();
							handleClose();
						}}
						onError={() => setSellers(previousSellers)}
					/>
				)}
			</Modal>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
			<Modal
				isOpen={isEditModalOpen}
				onClose={() => setIsEditModalOpen(false)}
				title='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω'
				className='card-o'>
				{({ handleClose }) =>
					editingSeller && (
						<SellerForm
							initialData={editingSeller}
							existingSellers={sellers}
							onSuccess={async (updatedSeller) => {
								setSellers((prev) =>
									prev.map((s) =>
										s.seller_id === editingSeller.seller_id
											? updatedSeller
											: s
									)
								);
								await refreshUserData();
								handleClose();
							}}
							onError={() => setSellers(previousSellers)}
						/>
					)
				}
			</Modal>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è */}
			<Modal
				isOpen={isDeleteModalOpen}
				onClose={() => setIsDeleteModalOpen(false)}
				title='–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω?'
				className='card-r'>
				{({ handleClose }) => (
					<>
						<div className='seller-info'>
							<h3 className='seller-name'>
								{sellerToDelete?.seller_name}
							</h3>
							<p className='seller-inn'>
								–ò–ù–ù {sellerToDelete?.seller_id}
							</p>
						</div>
						<div className='modal-actions'>
							<button
								onClick={async () => {
									await handleConfirmDelete();
									handleClose();
								}}
								className='btn btn-w'
								disabled={deleteLoading}>
								<span className='btn-label'>
									{deleteLoading ? '–£–¥–∞–ª—è—é...' : '–£–¥–∞–ª–∏—Ç—å'}
								</span>
							</button>
						</div>
					</>
				)}
			</Modal>
		</>
	);
}
